version: "3"

services:
  frontend:
    build:
      dockerfile: Dockerfile
      context: ./frontend
    environment:
      CHOKIDAR_USEPOLLING: "true"
    ports:
      - 8080:8080
    #    volumes:
    #      - /app/node_modules
    #      - ./frontend/web:/app
    volumes:
      - /app/node_modules
      - ./frontend:/app
    env_file:
      - ./frontend/.env
    depends_on:
      - backend
    networks:
      - web

  backend:
    build:
      dockerfile: Dockerfile
      context: ./backend
    ports:
      - 8081:8081
    volumes:
      - ./backend:/app # named volume
      - /app/node_modules # anonymous volume for node_modules only
    #    volumes:
    #      - /app/node_modules # anonymous volume for node_modules only
    #      - ./backend:/app # named volume
    #    volumes:
    #      - .:/usr/app # named volume
    #      - /usr/app/node_modules # anonymous volume for node_modules only
    env_file:
      - ./backend/.env
    depends_on:
      - postgres
    networks:
      - web

  postgres:
    image: postgres:13.4-alpine
    ports:
      - "5432:5432"
    volumes:
      - /data/postgres:/data/postgres
    env_file:
      - ./backend/.env
    networks:
      - postgres

  # pgadmin url - localhost:8082
  pgadmin:
    links:
      - postgres:postgres
    image: dpage/pgadmin4
    ports:
      - "8082:80"
    volumes:
      - /data/pgadmin:/root/.pgadmin
    env_file:
      - ./backend/.env
    networks:
      - postgres

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.3
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - 9200:9200
    volumes:
      - data01:/var/lib/elasticsearch
    logging:
      driver: "json-file"
      options:
        max-size: "10k"
        max-file: "10"
#  logstash:
#    build:
#      context: .
#      dockerfile: Dockerfile-logstash
#    container_name: sem_logstash
#    depends_on:
#      - mysql
#      - elasticsearch
#    volumes:
#      - ./volumes/logstash/pipeline/:/usr/share/logstash/pipeline/
#      - ./volumes/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
#      - ./volumes/logstash/config/pipelines.yml:/usr/share/logstash/config/pipelines.yml
#      - ./volumes/logstash/config/queries/:/usr/share/logstash/config/queries/
#    logging:
#      driver: "json-file"
#      options:
#        max-size: "10k"
#        max-file: "10"

#  elastic search with multiple nodes
#  es01:
#    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.1
#    container_name: es01
#    environment:
#      - node.name=es01
#      - cluster.name=es-docker-cluster
#      - discovery.seed_hosts=es02,es03
#      - cluster.initial_master_nodes=es01,es02,es03
#      - bootstrap.memory_lock=true
#      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1
#    volumes:
#      - data01:/usr/share/elasticsearch/data
#    ports:
#      - 9200:9200
#    networks:
#      - elastic
#  es02:
#    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.1
#    container_name: es02
#    environment:
#      - node.name=es02
#      - cluster.name=es-docker-cluster
#      - discovery.seed_hosts=es01,es03
#      - cluster.initial_master_nodes=es01,es02,es03
#      - bootstrap.memory_lock=true
#      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1
#    volumes:
#      - data02:/usr/share/elasticsearch/data
#    networks:
#      - elastic
#  es03:
#    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.1
#    container_name: es03
#    environment:
#      - node.name=es03
#      - cluster.name=es-docker-cluster
#      - discovery.seed_hosts=es01,es02
#      - cluster.initial_master_nodes=es01,es02,es03
#      - bootstrap.memory_lock=true
#      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1
#    volumes:
#      - data03:/usr/share/elasticsearch/data
#    networks:
#      - elastic

volumes:
  node_modules:
  data01:
    driver: local
#  data02:
#    driver: local
#  data03:
#    driver: local

networks:
  web:
    driver: bridge
  postgres:
    driver: bridge
  elastic:
    driver: bridge
